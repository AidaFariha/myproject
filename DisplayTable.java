
import javax.swing.JComboBox;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JButton;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Aida
 */
public class DisplayTable extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form DisplayTable
     */
    
    Object[][] ob;
    public DisplayTable(Object[][] ob) {
        this.ob = ob;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
     private void initComponents() {


        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(ob,
            new String [] {
                "Message ID", "Message Length", "Message Name", "Message Class"
            }
        ) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        
        JComboBox<String> comboBox = new JComboBox<String>();
        comboBox.setModel(new DefaultComboBoxModel<String>(new String[] {"Message ID", "Message Length", "Message Name", "Message Class"}));
        comboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                String selectedAttribute = (String) comboBox.getSelectedItem();
                if (selectedAttribute.equals("Message ID")) {
                	Object a;
                	for(int i=0; i < ob.length; i++){
                		for(int j=0; j< ob.length; j++){
                			if( Integer.valueOf(ob[j][0].toString()) > Integer.valueOf(ob[i][0].toString())){
                				a = ob[i];
                				ob[i] = ob[j];
                				ob[j] = (Object[]) a;    				
                			}
                		}
                	}
                	new DisplayTable(ob).setVisible(true);
                	
                } else if (comboBox.getSelectedItem().equals("Message Length")) {
                	System.out.print("haaa masuk");
                	Object a;
                	for(int i=0; i < ob.length; i++){
                		for(int j=0; j< ob.length; j++){
                			if( Integer.valueOf(ob[j][1].toString()) > Integer.valueOf(ob[i][1].toString())){
                				a = ob[i];
                				ob[i] = ob[j];
                				ob[j] = (Object[]) a;    				
                			}
                		}
                	}
                	new DisplayTable(ob).setVisible(true); 
                }
                
                else if (comboBox.getSelectedItem().equals("Message Name")) {
                	System.out.print("haaa masuk");
                	Object a;
                	for(int i=0; i < ob.length; i++){
                		for(int j=0; j< ob.length; j++){
                			if( Integer.valueOf(ob[j][2].toString()) > Integer.valueOf(ob[i][2].toString())){
                				a = ob[i];
                				ob[i] = ob[j];
                				ob[j] = (Object[]) a;    				
                			}
                		}
                	}
                	new DisplayTable(ob).setVisible(true); 
                }
                
                else if (comboBox.getSelectedItem().equals("Message Class")) {
                	System.out.print("haaa masuk");
                	Object a;
                	for(int i=0; i < ob.length; i++){
                		for(int j=0; j< ob.length; j++){
                			if( Integer.valueOf(ob[j][3].toString()) > Integer.valueOf(ob[i][3].toString())){
                				a = ob[i];
                				ob[i] = ob[j];
                				ob[j] = (Object[]) a;    				
                			}
                		}
                	}
                	new DisplayTable(ob).setVisible(true); 
                }
                
            }
        });
        

        
        JLabel lblSortBy = new JLabel("Sort by");
        
        textField = new JTextField();
        textField.setColumns(10);
        
        textField_1 = new JTextField();
        textField_1.setColumns(10);
        
        textField_2 = new JTextField();
        textField_2.setColumns(10);
        
        textField_3 = new JTextField();
        textField_3.setColumns(10);
        
        JButton btnNewButton = new JButton("Add");
        btnNewButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		try {
					String filename = "iso87gfci.xml";
					DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
					DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
					Document doc = docBuilder.parse(filename);
					doc.getDocumentElement().normalize();
					
					doc.getDocumentElement().normalize();
					
					Element element = doc.getDocumentElement();
					Element newisofield = doc.createElement("isofield");
					newisofield.setAttribute("id", textField.getText());
					newisofield.setAttribute("length", textField_1.getText());
					newisofield.setAttribute("name", textField_2.getText());
					newisofield.setAttribute("class", textField_3.getText());
					
					element.appendChild(newisofield);
				        
					TransformerFactory transformerFactory = TransformerFactory.newInstance();
					Transformer transformer = transformerFactory.newTransformer();
					DOMSource source = new DOMSource(doc);
					StreamResult result = new StreamResult(new File(filename));
					transformer.transform(source, result);
					
				}
				catch (ParserConfigurationException pce) {
					pce.printStackTrace();
				   } catch (TransformerException tfe) {
					tfe.printStackTrace();
				   } catch (IOException ioe) {
					ioe.printStackTrace();
				   } catch (SAXException sae) {
					sae.printStackTrace();
				   }
				
				setVisible(false);
        	}
        });
        
        JButton btnNewButton_1 = new JButton("Edit");
        btnNewButton_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try {
					String filepath = "iso87gfci.xml";
					DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
					DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
					Document doc = docBuilder.parse(filepath);
					doc.getDocumentElement().normalize();
					
					NodeList nodelist = doc.getElementsByTagName("isofield");
					
					for(int i=0; i<nodelist.getLength(); i++) { 
						
					Element element = (Element)nodelist.item(i); 
					String id = element.getAttribute("id"); 
					String input = textField.getText();
					
					if(id.equalsIgnoreCase(input)) { 
						element.setAttribute("length", textField_1.getText());
						element.setAttribute("name", textField_2.getText());
						element.setAttribute("class", textField_3.getText());
					} 
					} 
		
					TransformerFactory transformerFactory = TransformerFactory.newInstance();
					Transformer transformer = transformerFactory.newTransformer();
					DOMSource source = new DOMSource(doc);
					StreamResult result = new StreamResult(new File(filepath));
					transformer.transform(source, result);

					System.out.println("Done");

				   } catch (ParserConfigurationException pce) {
					pce.printStackTrace();
				   } catch (TransformerException tfe) {
					tfe.printStackTrace();
				   } catch (IOException ioe) {
					ioe.printStackTrace();
				   } catch (SAXException sae) {
					sae.printStackTrace();
				   }
				setVisible(false);
        	}
        });
        
        JButton btnNewButton_2 = new JButton("Delete");
        btnNewButton_2.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
//        		try {
//					String filepath = "iso87gfci.xml";
//					DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
//					DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
//					Document doc = docBuilder.parse(filepath);
//					doc.getDocumentElement().normalize();
//					
//					NodeList nodelist = doc.getElementsByTagName("isofield");
//					
//					for(int i=0; i<nodelist.getLength(); i++) { 
//						
//					Element element = (Element)nodelist.item(i); 
//					String id = element.getAttribute("id"); 
//					String input = textField.getText();
//					
//					if(id.equalsIgnoreCase(input)) { 
//						element.removeAttribute("length");
//						element.removeAttribute("name");
//						element.removeAttribute("class");
//					} 
//					} 
//		
//					TransformerFactory transformerFactory = TransformerFactory.newInstance();
//					Transformer transformer = transformerFactory.newTransformer();
//					DOMSource source = new DOMSource(doc);
//					StreamResult result = new StreamResult(new File(filepath));
//					transformer.transform(source, result);
//
//					System.out.println("Done");
//
//				   } catch (ParserConfigurationException pce) {
//					pce.printStackTrace();
//				   } catch (TransformerException tfe) {
//					tfe.printStackTrace();
//				   } catch (IOException ioe) {
//					ioe.printStackTrace();
//				   } catch (SAXException sae) {
//					sae.printStackTrace();
//				   }
//				setVisible(false);
        	}
        });
        
        

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(lblSortBy, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(368, Short.MAX_VALUE))
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(10)
        					.addComponent(btnNewButton)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(btnNewButton_1)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(btnNewButton_2))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(textField_1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(textField_2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(textField_3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap(220, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 603, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblSortBy, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)
        				.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(textField_1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(textField_2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(textField_3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnNewButton)
        				.addComponent(btnNewButton_1)
        				.addComponent(btnNewButton_2))
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
          /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
               /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new DisplayTable().setVisible(true);
            }
        });
    }

    
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private JTextField textField;
    private JTextField textField_1;
    private JTextField textField_2;
    private JTextField textField_3;
}
